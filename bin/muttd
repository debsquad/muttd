#!/usr/bin/env python3
#
# Copyright (c) 2017 Bertrand Janin <b@janin.com>
# Copyright (c) 2015 Vincent Tantardini, Bertrand Janin
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

"""Main executable script.

The purpose of this file is to handle CLI arguments and parse the configuration
file.
"""

import argparse
import configparser
import os.path

from muttd.serve import ServeCommand
from muttd.extract import ExtractCommand


def parse_cli():
    """Parse muttd command-line arguments.

    :return: An ArgumentParser args NamedTuple.

    """
    cli_parser = argparse.ArgumentParser(description="Viewer for mutt")
    cli_parser.add_argument("command")
    cli_parser.add_argument("-c", "--config",
                        default=os.path.expanduser("~/.muttd/config"))
    return cli_parser.parse_args()


def parse_config(filename):
    """Parse a muttd configuration file.

    :return: message_path, server_address, server_port

    """
    cfg_parser = configparser.ConfigParser()
    cfg_parser.read(cli_args.config)

    message_path = cfg_parser.get(
        "general",
        "message_path",
        fallback=os.path.expanduser("~/.muttd/message"),
    )
    server_address = cfg_parser.get("server", "address", fallback="127.0.0.1")
    server_port = int(cfg_parser.get("server", "port", fallback="8090"))

    return message_path, server_address, server_port


if __name__ == "__main__":
    cli_args = parse_cli()

    message_path, server_address, server_port = parse_config(cli_args.config)

    if cli_args.command == "serve":
        command = ServeCommand(
            message_path=message_path,
            address=server_address,
            port=server_port,
        )
    elif cli_args.command == "extract":
        command = ExtractCommand(
            message_path=message_path,
        )

    command.run()
